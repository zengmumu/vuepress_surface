(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{51:function(n,t,a){"use strict";a.r(t);var e=a(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content"},[a("p",[n._v("public class Validator {\n/**\n* 正则表达式：验证用户名\n* ^表示输入字符串的开始位置，$匹配输入字符串的结尾位置\n* \\w表示匹配任何字类字符（相当于[a-zA-Z0-9_]）\n"),a("em",[n._v('/\npublic static final String REGEX_USERNAME = "^[a-zA-Z]\\w{5,17}$"; //字母开头，字符串由6到18位字母、数字和下划线组成\n/')]),n._v("*\n* 正则表达式：验证密码\n"),a("em",[n._v('/\npublic static final String REGEX_PASSWORD = "^[a-zA-Z0-9]{6,16}$";  //由6到16位数字或字母组成\n/')]),n._v("*\n* 正则表达式：验证手机号\n* [^4,\\D]表示除4以外的数字\n* 130-139、15开头的除了154、180和185-189开头的号码\n"),a("em",[n._v('/\npublic static final String REGEX_MOBILE = "^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$";\n/')]),n._v("*\n* +表示出现过一次或多次，-|\\.表示匹配-或.,?表示零次或一次，\n* 正则表达式：验证邮箱\n* 以数字或字母开头，@的左边允许有-或者.，@右边以若干字母或数字开头，后面可以有-号，再加上字母或数字，也可以没有，再加上.,最后加上2个以上的字母结尾\n"),a("em",[n._v('/\npublic static final String REGEX_EMAIL = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";\n/')]),n._v("*\n* 正则表达式：验证汉字\n* 表示匹配四位十六进制数表示的 Unicode 字符，中文字符的范围就是4e00-9fa5\n"),a("em",[n._v('/\npublic static final String REGEX_CHINESE = "^[\\u4e00-\\u9fa5],{0,}$";\n/')]),n._v("*\n* 正则表达式：验证身份证\n* \\d是匹配数字字符，表示身份证号可取15或18位\n"),a("em",[n._v('/\npublic static final String REGEX_ID_CARD = "(^\\d{18}$)|(^\\d{15}$)";\n/')]),n._v("*\n* 正则表达式：验证URL\n* http或https开头，.号前的数字，字母或下划线出现一次或多次，.后面出现一个或多个字母\n"),a("em",[n._v('/\npublic static final String REGEX_URL = "http(s)?😕/([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]')]),n._v(')?";')]),a("pre",[a("code",[n._v('/**\n * 正则表达式：验证IP地址\n * 25开头，如251、252但是不能超过255。。。\n */\npublic static final String REGEX_IP_ADDR = "(25[0-5]|2[0-4]\\\\d|[0-1]\\\\d{2}|[1-9]?\\\\d)";\n\n/**\n * 校验用户名\n *\n * @param username\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isUsername(String username) {\n    return Pattern.matches(REGEX_USERNAME, username);\n}\n\n/**\n * 校验密码\n *\n * @param password\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isPassword(String password) {\n    return Pattern.matches(REGEX_PASSWORD, password);\n}\n\n/**\n * 校验手机号\n *\n * @param mobile\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isMobile(String mobile) {\n    return Pattern.matches(REGEX_MOBILE, mobile);\n}\n\n/**\n * 校验邮箱\n *\n * @param email\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isEmail(String email) {\n    return Pattern.matches(REGEX_EMAIL, email);\n}\n\n/**\n * 校验汉字\n *\n * @param chinese\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isChinese(String chinese) {\n    return Pattern.matches(REGEX_CHINESE, chinese);\n}\n\n/**\n * 校验身份证\n *\n * @param idCard\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isIDCard(String idCard) {\n    return Pattern.matches(REGEX_ID_CARD, idCard);\n}\n\n/**\n * 校验URL\n *\n * @param url\n * @return 校验通过返回true，否则返回false\n */\npublic static boolean isUrl(String url) {\n    return Pattern.matches(REGEX_URL, url);\n}\n\n/**\n * 校验IP地址\n *\n * @param ipAddr\n * @return\n */\npublic static boolean isIPAddr(String ipAddr) {\n    return Pattern.matches(REGEX_IP_ADDR, ipAddr);\n}\n\npublic static void main(String[] args) {\n    String username = "http://baidu.com";\n    System.out.println(Validator.isUsername(username));\n    System.out.println(Validator.isChinese(username));\n    System.out.println(Validator.isUrl(username));\n}\n')])]),a("p",[n._v("}")])])}],!1,null,null,null);t.default=r.exports}}]);